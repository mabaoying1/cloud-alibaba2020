<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>cloud-alibaba2020</artifactId>
        <groupId>com.bsoft</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>cloudaalibaba-api-commons</artifactId>


    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
            <!-- <scop>
            1.compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去
            2.test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit
            3.runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段
            4.provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作
            5.system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径
            -->
            <!-- Optional定义后，该依赖只能在本项目中传递，不会传递到引用该项目的子项目中，子项目需要主动引用该依赖才行。
            例如：
            A项目中依赖引用了test-artifactId（如上代码块显示），
            B项目依赖引用了A项目，那么A项目中的test-artifactId因为 true
            所以，再根据[Maven]依赖传递机制，B项目中将不会有A项目的test-artifactId依赖传递过来
            注意：
            如果A项目打包的时候没有将自己所需的test-artifactId一同打包，在这种情况下使用 true标注；那么在B项目中使用A项目的时候，
            B项目不能拉取A项目中所需要的test-artifactId，并且A项目中需要的依赖test-artifactId也不能获取。这时候使用的过程中会发生NotClassFound！！！
            -->
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.1.0</version>
        </dependency>
    </dependencies>

</project>